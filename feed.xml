<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-19T19:49:58+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Barrie Callender</title><subtitle>I came into this world with nothing and managed to retain most of it</subtitle><entry><title type="html">Reworking the Workpattern Gem</title><link href="http://localhost:4000/2018/11/18/reworking-the-workpattern-gem.html" rel="alternate" type="text/html" title="Reworking the Workpattern Gem" /><published>2018-11-18T21:34:04+00:00</published><updated>2018-11-18T21:34:04+00:00</updated><id>http://localhost:4000/2018/11/18/reworking-the-workpattern-gem</id><content type="html" xml:base="http://localhost:4000/2018/11/18/reworking-the-workpattern-gem.html">&lt;p&gt;&lt;img src=&quot;/images/reworking_workpattern_gem.png&quot; alt=&quot;rework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This whole post is really here to challenge myself to do what I say I am going to do by making it public.  I will be posting articles in the future which should be more interesting.  There I go again with yet another promise!&lt;/p&gt;

&lt;h2 id=&quot;the-workpattern-gem&quot;&gt;The Workpattern gem&lt;/h2&gt;
&lt;p&gt;I wrote a Rubygem called Workpattern which performs date calculations taking into consideration the patterns of working and resting time in each day down to a single minute.  It is designed to perform the kind of temporal calculations needed to calculate a forward and backward pass for a project schedule.  Examples of products which do this include &lt;a href=&quot;https://products.office.com/en-gb/project/project-and-portfolio-management-software&quot;&gt;Microsoft Project&lt;/a&gt;, &lt;a href=&quot;https://www.oracle.com/applications/primavera/products/project-portfolio-management/&quot;&gt;Oracle Primavera P6&lt;/a&gt;, &lt;a href=&quot;https://www.deltek.com/en/products/project-and-portfolio-management/open-plan&quot;&gt;Open Plan&lt;/a&gt; and any other project management scheduling application.&lt;/p&gt;

&lt;p&gt;At the time of writing it has 279 assertions in the test suite which take about 0.17 seconds to run.  I wrote it to learn how to program in Ruby and to cut a long story short, it is a bit of an ugly mess.  The latest version is 0.5.0, released on 19th October 2016, and had 831 downloads when writing this post.  I recently took a look at it and found the code to be hard to follow, poorly structured and frankly embarrassing.  I have failed to build a community around it or provide a decent example of how it could be used.&lt;/p&gt;

&lt;h2 id=&quot;can-i-become-a-software-developer&quot;&gt;Can I become a Software Developer?&lt;/h2&gt;
&lt;p&gt;In my day job, I help organisations improve their project delivery, which usually involves the use of new software or reconfiguration of existing software.  There have been times when I end up having to do a bit of programming which I really enjoy.  I am a bit of a dabbler and seem to get to know a little of a new language about every year.  At 55 years old, I’ve decided I’d like to take on the role as a Software Developer (again! this is not the firsttime) and as a first step I’ve started to refactor the Workpattern rubygem this very evening.&lt;/p&gt;

&lt;h2 id=&quot;first-steps-again&quot;&gt;First steps (again!)&lt;/h2&gt;
&lt;p&gt;I had a quick scan of it and ran the test suite using Ruby v2.6 which produced a number of warnings I then dealt with so they would go away.  I’m making very small changes and ensuring the test suite passes before I commit.  These changes are in the &lt;a href=&quot;https://github.com/callenb/workpattern/tree/rework&quot;&gt;rework branch in the Workpattern github repository&lt;/a&gt;.  I then moved on to replacing some literals with constants so I don’t repeat myself.  Each change is small and only gets committed when the tests pass.  This has helped me to refamiliarise myself with the code.&lt;/p&gt;

&lt;p&gt;There is almost no documentation in the code and I want to add appropriate documentation.  The way I implement Workpattern is not obvious and cannot be explained by good named methods and variables alone, even if I had them, which I don’t.  I would also like to provide at least one basic sample application to help potential users understand what it can do.&lt;/p&gt;

&lt;p&gt;This is quite a lot of work to do as a hobby so I imagine it won’t be completed until at least Easter 2019.  Hopefully, I will learn quite a lot on the way and may even post something of interest to my future self as well as others.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/11/04/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-11-04T19:23:02+00:00</published><updated>2018-11-04T19:23:02+00:00</updated><id>http://localhost:4000/jekyll/update/2018/11/04/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/11/04/welcome-to-jekyll.html">&lt;p&gt;This site uses Jekyll and Octopress and goodness knows what else.  The rest of this post is created when starting a new Jekyll site.  None of this is my work.&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">This site uses Jekyll and Octopress and goodness knows what else. The rest of this post is created when starting a new Jekyll site. None of this is my work.</summary></entry></feed>